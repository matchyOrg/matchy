/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/events": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          organizer?: parameters["rowFilter.events.organizer"];
          title?: parameters["rowFilter.events.title"];
          description?: parameters["rowFilter.events.description"];
          /** The path to the header image */
          header_image?: parameters["rowFilter.events.header_image"];
          location?: parameters["rowFilter.events.location"];
          max_participants?: parameters["rowFilter.events.max_participants"];
          event_group_pair?: parameters["rowFilter.events.event_group_pair"];
          is_cancelled?: parameters["rowFilter.events.is_cancelled"];
          delay_for_sending_matches?: parameters["rowFilter.events.delay_for_sending_matches"];
          datetime?: parameters["rowFilter.events.datetime"];
          is_ended?: parameters["rowFilter.events.is_ended"];
          is_started?: parameters["rowFilter.events.is_started"];
          /** Whether match results of the event have been published */
          results_published?: parameters["rowFilter.events.results_published"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["events"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** events */
          events?: definitions["events"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          organizer?: parameters["rowFilter.events.organizer"];
          title?: parameters["rowFilter.events.title"];
          description?: parameters["rowFilter.events.description"];
          /** The path to the header image */
          header_image?: parameters["rowFilter.events.header_image"];
          location?: parameters["rowFilter.events.location"];
          max_participants?: parameters["rowFilter.events.max_participants"];
          event_group_pair?: parameters["rowFilter.events.event_group_pair"];
          is_cancelled?: parameters["rowFilter.events.is_cancelled"];
          delay_for_sending_matches?: parameters["rowFilter.events.delay_for_sending_matches"];
          datetime?: parameters["rowFilter.events.datetime"];
          is_ended?: parameters["rowFilter.events.is_ended"];
          is_started?: parameters["rowFilter.events.is_started"];
          /** Whether match results of the event have been published */
          results_published?: parameters["rowFilter.events.results_published"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.events.id"];
          organizer?: parameters["rowFilter.events.organizer"];
          title?: parameters["rowFilter.events.title"];
          description?: parameters["rowFilter.events.description"];
          /** The path to the header image */
          header_image?: parameters["rowFilter.events.header_image"];
          location?: parameters["rowFilter.events.location"];
          max_participants?: parameters["rowFilter.events.max_participants"];
          event_group_pair?: parameters["rowFilter.events.event_group_pair"];
          is_cancelled?: parameters["rowFilter.events.is_cancelled"];
          delay_for_sending_matches?: parameters["rowFilter.events.delay_for_sending_matches"];
          datetime?: parameters["rowFilter.events.datetime"];
          is_ended?: parameters["rowFilter.events.is_ended"];
          is_started?: parameters["rowFilter.events.is_started"];
          /** Whether match results of the event have been published */
          results_published?: parameters["rowFilter.events.results_published"];
        };
        body: {
          /** events */
          events?: definitions["events"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_group_pairs": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group_pairs.id"];
          group_a?: parameters["rowFilter.event_group_pairs.group_a"];
          group_b?: parameters["rowFilter.event_group_pairs.group_b"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_group_pairs"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_group_pairs */
          event_group_pairs?: definitions["event_group_pairs"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group_pairs.id"];
          group_a?: parameters["rowFilter.event_group_pairs.group_a"];
          group_b?: parameters["rowFilter.event_group_pairs.group_b"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_group_pairs.id"];
          group_a?: parameters["rowFilter.event_group_pairs.group_a"];
          group_b?: parameters["rowFilter.event_group_pairs.group_b"];
        };
        body: {
          /** event_group_pairs */
          event_group_pairs?: definitions["event_group_pairs"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_registrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_registrations.id"];
          event_id?: parameters["rowFilter.event_registrations.event_id"];
          user_id?: parameters["rowFilter.event_registrations.user_id"];
          group_id?: parameters["rowFilter.event_registrations.group_id"];
          present?: parameters["rowFilter.event_registrations.present"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_registrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_registrations */
          event_registrations?: definitions["event_registrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_registrations.id"];
          event_id?: parameters["rowFilter.event_registrations.event_id"];
          user_id?: parameters["rowFilter.event_registrations.user_id"];
          group_id?: parameters["rowFilter.event_registrations.group_id"];
          present?: parameters["rowFilter.event_registrations.present"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_registrations.id"];
          event_id?: parameters["rowFilter.event_registrations.event_id"];
          user_id?: parameters["rowFilter.event_registrations.user_id"];
          group_id?: parameters["rowFilter.event_registrations.group_id"];
          present?: parameters["rowFilter.event_registrations.present"];
        };
        body: {
          /** event_registrations */
          event_registrations?: definitions["event_registrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_groups": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_groups.id"];
          creator?: parameters["rowFilter.event_groups.creator"];
          title?: parameters["rowFilter.event_groups.title"];
          description?: parameters["rowFilter.event_groups.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_groups"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_groups */
          event_groups?: definitions["event_groups"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_groups.id"];
          creator?: parameters["rowFilter.event_groups.creator"];
          title?: parameters["rowFilter.event_groups.title"];
          description?: parameters["rowFilter.event_groups.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_groups.id"];
          creator?: parameters["rowFilter.event_groups.creator"];
          title?: parameters["rowFilter.event_groups.title"];
          description?: parameters["rowFilter.event_groups.description"];
        };
        body: {
          /** event_groups */
          event_groups?: definitions["event_groups"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/votes": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          user_id?: parameters["rowFilter.votes.user_id"];
          user_pair_id?: parameters["rowFilter.votes.user_pair_id"];
          vote?: parameters["rowFilter.votes.vote"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["votes"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          user_id?: parameters["rowFilter.votes.user_id"];
          user_pair_id?: parameters["rowFilter.votes.user_pair_id"];
          vote?: parameters["rowFilter.votes.vote"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.votes.id"];
          user_id?: parameters["rowFilter.votes.user_id"];
          user_pair_id?: parameters["rowFilter.votes.user_pair_id"];
          vote?: parameters["rowFilter.votes.vote"];
        };
        body: {
          /** votes */
          votes?: definitions["votes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          full_name?: parameters["rowFilter.profiles.full_name"];
          description?: parameters["rowFilter.profiles.description"];
          email?: parameters["rowFilter.profiles.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          full_name?: parameters["rowFilter.profiles.full_name"];
          description?: parameters["rowFilter.profiles.description"];
          email?: parameters["rowFilter.profiles.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.profiles.user_id"];
          full_name?: parameters["rowFilter.profiles.full_name"];
          description?: parameters["rowFilter.profiles.description"];
          email?: parameters["rowFilter.profiles.email"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/due_notifications": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.due_notifications.id"];
          content?: parameters["rowFilter.due_notifications.content"];
          subject?: parameters["rowFilter.due_notifications.subject"];
          send_earliest_at?: parameters["rowFilter.due_notifications.send_earliest_at"];
          email?: parameters["rowFilter.due_notifications.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["due_notifications"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** due_notifications */
          due_notifications?: definitions["due_notifications"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.due_notifications.id"];
          content?: parameters["rowFilter.due_notifications.content"];
          subject?: parameters["rowFilter.due_notifications.subject"];
          send_earliest_at?: parameters["rowFilter.due_notifications.send_earliest_at"];
          email?: parameters["rowFilter.due_notifications.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.due_notifications.id"];
          content?: parameters["rowFilter.due_notifications.content"];
          subject?: parameters["rowFilter.due_notifications.subject"];
          send_earliest_at?: parameters["rowFilter.due_notifications.send_earliest_at"];
          email?: parameters["rowFilter.due_notifications.email"];
        };
        body: {
          /** due_notifications */
          due_notifications?: definitions["due_notifications"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/all_constraints": {
    get: {
      parameters: {
        query: {
          relname?: parameters["rowFilter.all_constraints.relname"];
          conname?: parameters["rowFilter.all_constraints.conname"];
          contype?: parameters["rowFilter.all_constraints.contype"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["all_constraints"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/event_rounds": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_rounds.id"];
          event_id?: parameters["rowFilter.event_rounds.event_id"];
          start_timestamp?: parameters["rowFilter.event_rounds.start_timestamp"];
          end_timestamp?: parameters["rowFilter.event_rounds.end_timestamp"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_rounds"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_rounds */
          event_rounds?: definitions["event_rounds"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_rounds.id"];
          event_id?: parameters["rowFilter.event_rounds.event_id"];
          start_timestamp?: parameters["rowFilter.event_rounds.start_timestamp"];
          end_timestamp?: parameters["rowFilter.event_rounds.end_timestamp"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_rounds.id"];
          event_id?: parameters["rowFilter.event_rounds.event_id"];
          start_timestamp?: parameters["rowFilter.event_rounds.start_timestamp"];
          end_timestamp?: parameters["rowFilter.event_rounds.end_timestamp"];
        };
        body: {
          /** event_rounds */
          event_rounds?: definitions["event_rounds"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/notifications": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.notifications.id"];
          content?: parameters["rowFilter.notifications.content"];
          subject?: parameters["rowFilter.notifications.subject"];
          /** The earliest time we may send the notification */
          send_earliest_at?: parameters["rowFilter.notifications.send_earliest_at"];
          /** The user's email */
          email?: parameters["rowFilter.notifications.email"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["notifications"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** notifications */
          notifications?: definitions["notifications"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.notifications.id"];
          content?: parameters["rowFilter.notifications.content"];
          subject?: parameters["rowFilter.notifications.subject"];
          /** The earliest time we may send the notification */
          send_earliest_at?: parameters["rowFilter.notifications.send_earliest_at"];
          /** The user's email */
          email?: parameters["rowFilter.notifications.email"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.notifications.id"];
          content?: parameters["rowFilter.notifications.content"];
          subject?: parameters["rowFilter.notifications.subject"];
          /** The earliest time we may send the notification */
          send_earliest_at?: parameters["rowFilter.notifications.send_earliest_at"];
          /** The user's email */
          email?: parameters["rowFilter.notifications.email"];
        };
        body: {
          /** notifications */
          notifications?: definitions["notifications"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/event_user_pairs": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_user_pairs.id"];
          event_round?: parameters["rowFilter.event_user_pairs.event_round"];
          main_user?: parameters["rowFilter.event_user_pairs.main_user"];
          other_user?: parameters["rowFilter.event_user_pairs.other_user"];
          match?: parameters["rowFilter.event_user_pairs.match"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["event_user_pairs"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** event_user_pairs */
          event_user_pairs?: definitions["event_user_pairs"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_user_pairs.id"];
          event_round?: parameters["rowFilter.event_user_pairs.event_round"];
          main_user?: parameters["rowFilter.event_user_pairs.main_user"];
          other_user?: parameters["rowFilter.event_user_pairs.other_user"];
          match?: parameters["rowFilter.event_user_pairs.match"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.event_user_pairs.id"];
          event_round?: parameters["rowFilter.event_user_pairs.event_round"];
          main_user?: parameters["rowFilter.event_user_pairs.main_user"];
          other_user?: parameters["rowFilter.event_user_pairs.other_user"];
          match?: parameters["rowFilter.event_user_pairs.match"];
        };
        body: {
          /** event_user_pairs */
          event_user_pairs?: definitions["event_user_pairs"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/create_event_with_groups": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            groupBTitle: string;
            /** Format: integer */
            max_participants: number;
            /** Format: text */
            groupADescription: string;
            /** Format: text */
            header_image: string;
            /** Format: text */
            groupBDescription: string;
            /** Format: text */
            description: string;
            /** Format: text */
            location: string;
            /** Format: text */
            title: string;
            /** Format: timestamp with time zone */
            datetime: string;
            /** Format: text */
            groupATitle: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/delete_user": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/compute_matches_and_send_notifications": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            ev_id: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/can_form_pair": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bigint */
            event_round: number;
            /** Format: uuid */
            main_user: string;
            /** Format: uuid */
            other_user: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  /** @description Events */
  events: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    organizer?: string;
    /** Format: text */
    title: string;
    /** Format: text */
    description: string;
    /**
     * Format: text
     * @description The path to the header image
     */
    header_image?: string;
    /** Format: character varying */
    location: string;
    /** Format: smallint */
    max_participants: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_group_pairs.id`.<fk table='event_group_pairs' column='id'/>
     */
    event_group_pair?: number;
    /**
     * Format: boolean
     * @default false
     */
    is_cancelled: boolean;
    /** Format: smallint */
    delay_for_sending_matches?: number;
    /** Format: timestamp with time zone */
    datetime: string;
    /**
     * Format: boolean
     * @default false
     */
    is_ended: boolean;
    /**
     * Format: boolean
     * @default false
     */
    is_started: boolean;
    /**
     * Format: boolean
     * @description Whether match results of the event have been published
     * @default false
     */
    results_published: boolean;
  };
  /** @description Attribute of event: 2 groups */
  event_group_pairs: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_groups.id`.<fk table='event_groups' column='id'/>
     */
    group_a?: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_groups.id`.<fk table='event_groups' column='id'/>
     */
    group_b?: number;
  };
  /** @description Registration of participants to events */
  event_registrations: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    user_id: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_groups.id`.<fk table='event_groups' column='id'/>
     */
    group_id?: number;
    /**
     * Format: boolean
     * @default false
     */
    present: boolean;
  };
  /** @description Attribute of event: 1 of 2 groups */
  event_groups: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    creator: string;
    /** Format: character varying */
    title: string;
    /** Format: text */
    description: string;
  };
  /** @description Attribute of pairings (2 for each pairing): A vote on whether the user liked their date or not */
  votes: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    user_id: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_user_pairs.id`.<fk table='event_user_pairs' column='id'/>
     */
    user_pair_id: number;
    /** Format: boolean */
    vote: boolean;
  };
  /** @description Extends the user / authentication table (created automatically with a trigger) */
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    user_id: string;
    /** Format: character varying */
    full_name?: string;
    /** Format: text */
    description?: string;
    /** Format: character varying */
    email: string;
  };
  due_notifications: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: number;
    /** Format: character varying */
    content?: string;
    /** Format: character varying */
    subject?: string;
    /** Format: timestamp with time zone */
    send_earliest_at?: string;
    /** Format: character varying */
    email?: string;
  };
  all_constraints: {
    /** Format: name */
    relname?: string;
    /** Format: name */
    conname?: string;
    /** Format: "char" */
    contype?: string;
  };
  /** @description A single round of an event */
  event_rounds: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `events.id`.<fk table='events' column='id'/>
     */
    event_id: number;
    /** Format: timestamp with time zone */
    start_timestamp: string;
    /** Format: timestamp with time zone */
    end_timestamp: string;
  };
  /** @description Notifications for users */
  notifications: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: character varying
     * @default
     */
    content: string;
    /**
     * Format: character varying
     * @default
     */
    subject: string;
    /**
     * Format: timestamp with time zone
     * @description The earliest time we may send the notification
     */
    send_earliest_at?: string;
    /**
     * Format: character varying
     * @description The user's email
     */
    email: string;
  };
  /** @description A pairing of users in an event round */
  event_user_pairs: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `event_rounds.id`.<fk table='event_rounds' column='id'/>
     */
    event_round: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    main_user: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.user_id`.<fk table='profiles' column='user_id'/>
     */
    other_user: string;
    /** Format: boolean */
    match?: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description events */
  "body.events": definitions["events"];
  /** Format: bigint */
  "rowFilter.events.id": string;
  /** Format: uuid */
  "rowFilter.events.organizer": string;
  /** Format: text */
  "rowFilter.events.title": string;
  /** Format: text */
  "rowFilter.events.description": string;
  /**
   * Format: text
   * @description The path to the header image
   */
  "rowFilter.events.header_image": string;
  /** Format: character varying */
  "rowFilter.events.location": string;
  /** Format: smallint */
  "rowFilter.events.max_participants": string;
  /** Format: bigint */
  "rowFilter.events.event_group_pair": string;
  /** Format: boolean */
  "rowFilter.events.is_cancelled": string;
  /** Format: smallint */
  "rowFilter.events.delay_for_sending_matches": string;
  /** Format: timestamp with time zone */
  "rowFilter.events.datetime": string;
  /** Format: boolean */
  "rowFilter.events.is_ended": string;
  /** Format: boolean */
  "rowFilter.events.is_started": string;
  /**
   * Format: boolean
   * @description Whether match results of the event have been published
   */
  "rowFilter.events.results_published": string;
  /** @description event_group_pairs */
  "body.event_group_pairs": definitions["event_group_pairs"];
  /** Format: bigint */
  "rowFilter.event_group_pairs.id": string;
  /** Format: bigint */
  "rowFilter.event_group_pairs.group_a": string;
  /** Format: bigint */
  "rowFilter.event_group_pairs.group_b": string;
  /** @description event_registrations */
  "body.event_registrations": definitions["event_registrations"];
  /** Format: bigint */
  "rowFilter.event_registrations.id": string;
  /** Format: bigint */
  "rowFilter.event_registrations.event_id": string;
  /** Format: uuid */
  "rowFilter.event_registrations.user_id": string;
  /** Format: bigint */
  "rowFilter.event_registrations.group_id": string;
  /** Format: boolean */
  "rowFilter.event_registrations.present": string;
  /** @description event_groups */
  "body.event_groups": definitions["event_groups"];
  /** Format: bigint */
  "rowFilter.event_groups.id": string;
  /** Format: uuid */
  "rowFilter.event_groups.creator": string;
  /** Format: character varying */
  "rowFilter.event_groups.title": string;
  /** Format: text */
  "rowFilter.event_groups.description": string;
  /** @description votes */
  "body.votes": definitions["votes"];
  /** Format: bigint */
  "rowFilter.votes.id": string;
  /** Format: uuid */
  "rowFilter.votes.user_id": string;
  /** Format: bigint */
  "rowFilter.votes.user_pair_id": string;
  /** Format: boolean */
  "rowFilter.votes.vote": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.user_id": string;
  /** Format: character varying */
  "rowFilter.profiles.full_name": string;
  /** Format: text */
  "rowFilter.profiles.description": string;
  /** Format: character varying */
  "rowFilter.profiles.email": string;
  /** @description due_notifications */
  "body.due_notifications": definitions["due_notifications"];
  /** Format: bigint */
  "rowFilter.due_notifications.id": string;
  /** Format: character varying */
  "rowFilter.due_notifications.content": string;
  /** Format: character varying */
  "rowFilter.due_notifications.subject": string;
  /** Format: timestamp with time zone */
  "rowFilter.due_notifications.send_earliest_at": string;
  /** Format: character varying */
  "rowFilter.due_notifications.email": string;
  /** @description all_constraints */
  "body.all_constraints": definitions["all_constraints"];
  /** Format: name */
  "rowFilter.all_constraints.relname": string;
  /** Format: name */
  "rowFilter.all_constraints.conname": string;
  /** Format: "char" */
  "rowFilter.all_constraints.contype": string;
  /** @description event_rounds */
  "body.event_rounds": definitions["event_rounds"];
  /** Format: bigint */
  "rowFilter.event_rounds.id": string;
  /** Format: bigint */
  "rowFilter.event_rounds.event_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.event_rounds.start_timestamp": string;
  /** Format: timestamp with time zone */
  "rowFilter.event_rounds.end_timestamp": string;
  /** @description notifications */
  "body.notifications": definitions["notifications"];
  /** Format: bigint */
  "rowFilter.notifications.id": string;
  /** Format: character varying */
  "rowFilter.notifications.content": string;
  /** Format: character varying */
  "rowFilter.notifications.subject": string;
  /**
   * Format: timestamp with time zone
   * @description The earliest time we may send the notification
   */
  "rowFilter.notifications.send_earliest_at": string;
  /**
   * Format: character varying
   * @description The user's email
   */
  "rowFilter.notifications.email": string;
  /** @description event_user_pairs */
  "body.event_user_pairs": definitions["event_user_pairs"];
  /** Format: bigint */
  "rowFilter.event_user_pairs.id": string;
  /** Format: bigint */
  "rowFilter.event_user_pairs.event_round": string;
  /** Format: uuid */
  "rowFilter.event_user_pairs.main_user": string;
  /** Format: uuid */
  "rowFilter.event_user_pairs.other_user": string;
  /** Format: boolean */
  "rowFilter.event_user_pairs.match": string;
}

export interface operations {}

export interface external {}
